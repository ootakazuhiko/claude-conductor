version: '3.8'

services:
  # Main orchestrator service with dashboard
  conductor:
    build:
      context: ..
      dockerfile: containers/Dockerfile
      target: production
      args:
        PYTHON_VERSION: "3.11"
        NODE_VERSION: "18"
    container_name: claude-conductor
    restart: unless-stopped
    user: "1000:1000"
    read_only: true
    security_opt:
      - no-new-privileges:true
      - seccomp:default
    cap_drop:
      - ALL
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
      - /var/tmp:rw,noexec,nosuid,size=50m
    volumes:
      - conductor_workspace:/workspace:rw
      - conductor_logs:/var/log/conductor:rw
      - conductor_config:/home/claude/.conductor:rw
      - shared_sockets:/shared/sockets:rw
      # WARNING: Docker socket mount removed for security
      # Use Podman API or separate orchestration service instead
    environment:
      - CONDUCTOR_MODE=production
      - CONDUCTOR_LOG_LEVEL=INFO
      - CONDUCTOR_CONFIG=/app/config/config.yaml
      - CONDUCTOR_DASHBOARD_PORT=8080
      - CONDUCTOR_NUM_AGENTS=3
    ports:
      - "8080:8080"   # Dashboard
      - "8081:8081"   # API
    networks:
      - claude-network
    healthcheck:
      test: ["CMD", "/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: ["full"]

  # Redis for task queue persistence (optional)
  redis:
    image: redis:7-alpine
    container_name: claude-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - claude-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - claude-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: claude-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - claude-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Development service
  conductor-dev:
    build:
      context: ..
      dockerfile: containers/Dockerfile
      target: development
    container_name: claude-conductor-dev
    volumes:
      - ..:/app:ro  # Read-only source mount for security
      - conductor_dev_workspace:/workspace:rw
      # WARNING: Docker socket mount removed for security
    environment:
      - CONDUCTOR_MODE=development
      - CONDUCTOR_LOG_LEVEL=DEBUG
    ports:
      - "8080:8080"
      - "8081:8081"
    networks:
      - claude-network
    command: ["development"]
    profiles:
      - development

volumes:
  conductor_workspace:
    driver: local
  conductor_logs:
    driver: local
  conductor_config:
    driver: local
  conductor_dev_workspace:
    driver: local
  shared_sockets:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  claude-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16