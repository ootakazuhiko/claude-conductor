[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "claude-conductor"
dynamic = ["version"]
description = "Multi-agent orchestration system for Claude Code instances"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Claude Conductor Team", email = "noreply@claude-conductor.local"}
]
maintainers = [
    {name = "Claude Conductor Team", email = "noreply@claude-conductor.local"}
]
keywords = [
    "claude",
    "orchestration", 
    "multi-agent",
    "automation",
    "containerization",
    "distributed-computing",
    "task-management",
    "parallel-processing"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
requires-python = ">=3.9"
dependencies = [
    "pyyaml>=6.0",
    "psutil>=5.9.5",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-timeout>=2.1.0",
    "redis>=4.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-timeout>=2.1.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.2.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.0.0"
]
web = [
    "fastapi>=0.100.0",
    "uvicorn>=0.22.0",
    "jinja2>=3.1.0",
    "websockets>=11.0.0",
    "aiofiles>=23.0.0"
]
db = [
    "redis>=4.6.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.11.0",
    "asyncpg>=0.28.0"
]
monitoring = [
    "prometheus-client>=0.17.0",
    "opentelemetry-api>=1.18.0",
    "opentelemetry-sdk>=1.18.0",
    "structlog>=23.1.0"
]
k8s = [
    "kubernetes>=27.0.0",
    "pyyaml>=6.0"
]
all = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-timeout>=2.1.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.2.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.0.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.22.0",
    "jinja2>=3.1.0",
    "websockets>=11.0.0",
    "aiofiles>=23.0.0",
    "redis>=4.6.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.11.0",
    "asyncpg>=0.28.0",
    "prometheus-client>=0.17.0",
    "opentelemetry-api>=1.18.0",
    "opentelemetry-sdk>=1.18.0",
    "structlog>=23.1.0",
    "kubernetes>=27.0.0"
]

[project.urls]
Homepage = "https://github.com/ootakazuhiko/claude-conductor"
Repository = "https://github.com/ootakazuhiko/claude-conductor"
Documentation = "https://github.com/ootakazuhiko/claude-conductor/blob/main/docs/"
"Bug Reports" = "https://github.com/ootakazuhiko/claude-conductor/issues"
Changelog = "https://github.com/ootakazuhiko/claude-conductor/blob/main/CHANGELOG.md"

[project.scripts]
claude-conductor = "conductor.orchestrator:main"
conductor = "conductor.orchestrator:main"
claude-orchestrator = "conductor.orchestrator:main"

[tool.hatch.version]
path = "conductor/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["conductor"]

[tool.uv]
dev-dependencies = [
    "black>=23.7.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.3.0",
    "ipython>=8.12.0",
    "ipdb>=0.13.13",
]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests", 
    "container: marks tests that require container runtime",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["conductor"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
target-version = "py39"
line-length = 100
fix = true

select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]

ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.ruff.isort]
known-third-party = ["pytest", "yaml", "redis", "psutil"]